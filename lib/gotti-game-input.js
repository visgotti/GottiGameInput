!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.GottiGameInput=e():t.GottiGameInput=e()}(window,(function(){return function(t){var e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(n,o,function(e){return t[e]}.bind(null,o));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=2)}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InputSystem=void 0;e.InputSystem=class{constructor(t){this._onActionListeners={},this._onMappedActionAddedListeners=[],this._onMappedActionRemovedListeners=[],this.actionState={},this.actionNames=[],this.mappedInputIdToActions={},this.mappedActionToInputIds={},t&&this.applyActionToInputMap(t)}applyActionToInputMap(t){if(!this.validateActionToInputMap(t))throw new Error("Invalid.");for(let e in t)this.addActionState(e,!1),t[e].forEach(t=>{this.mapInputIdToAction(t,e)})}getMappedActionInputs(){return Object.assign({},this.mappedActionToInputIds)}validateActionToInputMap(t){return!0}update(){var t;const e=Object.assign({},this.actionState);this.updateState();let i=null;for(let n=0;n<this.actionNames.length;n++){const o=this.actionNames[n],s=e[o],a=this.actionState[o];if(s!==a){i=i||{};const e={previous:s,current:a};i[o]=e,null===(t=this._onActionListeners[o])||void 0===t||t.forEach(t=>t(e))}}return{state:this.actionState,changed:i}}getUnmappedActions(){return this.actionNames.filter(t=>!(t in this.mappedActionToInputIds))}handleActionChange(t,e){if(!(t in this.actionState))throw new Error("Invalid action changed "+t)}addActionState(t,e=!1){if(t in this.actionState)throw new Error("Already added action "+t);this.actionState[t]=e,this.actionNames=Object.keys(this.actionState)}removeActionState(t){if(!(t in this.actionState))throw new Error("No action added: "+t);delete this.actionState[t],this.actionNames=Object.keys(this.actionState)}onActionChange(t,e){this._onActionListeners[t]?this._onActionListeners[t].push(e):this._onActionListeners[t]=[e]}offActionChange(t,e){const i=this._onActionListeners[t];if(i){const n=i.indexOf(e);n>-1&&i.splice(n,1),i.length||delete this._onActionListeners[t]}}onMappedActionAdded(t){return this._onMappedActionAddedListeners.push(t)}offMappedActionAdded(t){const e=this._onMappedActionAddedListeners.push(t);return e>-1&&this._onMappedActionAddedListeners.splice(e,1),this._onMappedActionAddedListeners.length}onMappedActionRemoved(t){return this._onMappedActionRemovedListeners.push(t)}offMappedActionRemoved(t){const e=this._onMappedActionRemovedListeners.indexOf(t);return e>-1&&this._onMappedActionRemovedListeners.splice(e,1),this._onMappedActionRemovedListeners.length}unmapInputFromAction(t,e){const i=this.mappedInputIdToActions[t];if(void 0===i)throw new Error(`The inputId ${t} was not mapped to any action.`);const n={inputId:t,action:e,actionNowUnmapped:!1},o=i.indexOf(e);if(o<0)throw new Error(`The inputId ${t} was not mapped to action ${e}.`);i.splice(o,1),i.length||delete this.mappedInputIdToActions[t];const s=this.mappedActionToInputIds[e].indexOf(t);if(s<0)throw new Error("Index should be greater than -1");return this.mappedActionToInputIds[e].splice(s,1),this.mappedActionToInputIds[e].length||delete this.mappedActionToInputIds[e],this._onMappedActionRemovedListeners.forEach(t=>t(n)),n}mapInputIdToAction(t,e){const i={action:e,inputId:t},n=this.mappedInputIdToActions[t];if(!(null==n?void 0:n.includes(e)))return this.mappedInputIdToActions[t]?this.mappedInputIdToActions[t].push(e):this.mappedInputIdToActions[t]=[e],this.mappedActionToInputIds[e]?this.mappedActionToInputIds[e].push(t):this.mappedActionToInputIds[e]=[t],this._onMappedActionAddedListeners.forEach(t=>t(i)),i}resolveActions(t){return this.mappedInputIdToActions[t]}resolveInputs(t){return this.mappedActionToInputIds[t]}getDuplicateInputs(){const t={};return Object.keys(this.mappedInputIdToActions).forEach(e=>{this.mappedActionToInputIds[e].length>1&&(t[e]=this.mappedActionToInputIds[e])}),t}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getDirectionFromNorth0Degrees=e.isValidDirection=e.normalizeAxes=void 0;const n=180/Math.PI,o=Math.PI/180;e.normalizeAxes=function(t,e){if(Math.abs(t)<=.05&&Math.abs(e)<=.05)return{angles:null,power:0};const i=Math.atan2(e,t),s=i*n;let a=90-s;return a<0&&(a+=360),{angles:{default:{radians:i,degrees:s},north0:{degrees:a,radians:a*o}},power:Math.max(Math.abs(t)+Math.abs(e))}},e.isValidDirection=function(t){return["north","northeast","east","southeast","south","southwest","west","northwest"].includes(t)},e.getDirectionFromNorth0Degrees=function(t){const e=Math.round(t/45);return e>7?"north":["north","northeast","east","southeast","south","southwest","west","northwest"][e]}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(3);e.default=n.GameInput},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GameInput=void 0;const n=i(4),o=i(9),s=i(10);e.GameInput=class{constructor(t,e){this.updateController=()=>[],this.updateKeyboard=()=>null,this.updateTouch=()=>null,this.updateMouse=()=>null,!(e=e||{}).keyboard&&this.initializeKeyboardSystem(null==t?void 0:t.keyboard),!e.mouse&&this.initializeMouseManager(),!e.controller&&this.initializeControllerManager(t.controller)}update(){return{keyboard:this.updateKeyboard(),mouse:this.updateMouse(),controller:this.updateController(),touch:this.updateTouch()}}updateOnlyMouse(){}updateOnlyTouch(){}registerSystemHandlers(t){}initializeKeyboardSystem(t){this.keyboardSystem=new o.KeyboardSystem(t),this.updateKeyboard=this.keyboardSystem.update.bind(this.keyboardSystem)}initializeTouchManager(t){this.touchSystem=t(),this.updateTouch=this.touchSystem.update.bind(this.touchSystem)}initializeMouseManager(t){this.mouseSystem=new s.MouseSystem(t),this.updateMouse=this.mouseSystem.update.bind(this.mouseSystem)}initializeControllerManager(t){this.controllerManager=new n.ControllerManager(t),this.controllerManager.on("add",t=>{console.error("ADDED CONTROLLER SYSTEM:",t)}),this.controllerManager.on("remove",t=>{}),this.controllerManager.init(),this.updateController=this.controllerManager.update.bind(this.controllerManager)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ControllerManager=void 0;const n=i(5),o=i(8);class s extends o.BaseManager{constructor(t){if(super(),this.needsPolling=!1,this.trackedSystemArray=[],this.initializedSystemArray=[],this.state=t,"undefined"==typeof navigator)throw new Error("No navigator object found.");if("undefined"==typeof window)throw new Error("No window object found.");this.needsPolling=!("ongamepadconnected"in window)}onClear(){if(this.needsPolling||(window.removeEventListener("gamepadconnected",this.handleGamePadConnected),window.removeEventListener("gamepaddisconnected",this.handleGamePadDisconnected)),[...this.initializedSystemArray].forEach(t=>this.handleGamePadDisconnected({gamepad:t.gamepad})),this.initializedSystemArray.length)throw new Error("Should have no initialized systems left.");if(!this.trackedSystemArray.every(t=>!!t))throw new Error("Should have no truthy values in the tracked system array")}onUpdate(){this.needsPolling&&this.pollGamepads()}init(){this.handleGamePadConnected=this.handleGamePadConnected.bind(this),this.handleGamePadDisconnected=this.handleGamePadDisconnected.bind(this),this.needsPolling||(window.addEventListener("gamepadconnected",this.handleGamePadConnected),window.addEventListener("gamepaddisconnected",this.handleGamePadDisconnected)),this.pollGamepads()}handleGamePadConnected(t){const e=t.gamepad.index,i=navigator.getGamepads()[e];if(i){if(this.trackedSystemArray[e])throw console.error("gamepad:",i,"index:",t.gamepad.index),new Error("This gamepad already had an initialized system at the index");const n=this.controllerSystemFactory(i);this.trackedSystemArray[e]=n,this.initializedSystemArray.push(n),this.addSystem(n)}}handleGamePadDisconnected(t){const e=t.gamepad.index;if(navigator.getGamepads()[e]){const t=this.trackedSystemArray[e];if(!t)throw new Error("No tracked system found for index: "+e);this.trackedSystemArray[e]=null;const i=this.initializedSystemArray.indexOf(t);if(i<0)throw new Error("Expected init index to be greater than -1.");this.initializedSystemArray.splice(i,1),this.removeSystem(t)}}pollGamepads(){const t=navigator.getGamepads?navigator.getGamepads():navigator.webkitGetGamepads?navigator.webkitGetGamepads:[];for(let e=0;e<t.length;e++){const i=t[e];if(i){const t=this.initializedSystemArray[i.index];i.connected?t?t.gamepad=i:this.handleGamePadConnected({gamepad:i}):!i.connected&&t&&this.handleGamePadDisconnected({gamepad:i})}}}controllerSystemFactory(t){return new n.DefaultController(t,this.state)}}e.ControllerManager=s},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=i(6);Object.defineProperty(e,"DefaultController",{enumerable:!0,get:function(){return n.DefaultController}})},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DefaultController=void 0;const n=i(7),o=i(1);class s extends n.BaseControllerSystem{constructor(t,e){if(super(t,e),e)for(let t in e.default.sticks.left)this.mapStickToAction(0,{action:t,direction:e.default.sticks.left[t]},!1)}updateState(){super.updateState();const t=(t,e)=>{const i=this.mappedStickActions.move[t],n=this.mappedStickActions.press[t];if(i){const s=parseFloat(this.gamepad.axes[2*t].toFixed(2)),a=parseFloat((-1*this.gamepad.axes[2*t+1]).toFixed(2)),{angles:r,power:d}=o.normalizeAxes(s,a);if(d){const e=o.getDirectionFromNorth0Degrees(r.north0.degrees);console.log("dir was:",e,r.north0.degrees),console.log("y was",this.gamepad.axes[2*t+1])}if(d){const{degrees:t}=r.north0,s=o.getDirectionFromNorth0Degrees(t);if(i.stringDirections){Object.keys(i.stringDirections).forEach(t=>{i.stringDirections[t].forEach(e=>{this.actionState[e]=t===s})})}if(i.degreeDirections){i.degreeDirections.forEach(e=>{e.actions.forEach(i=>{this.actionState[i]=(!e.min||e.min<=t)&&(!e.max||e.max>=t)})})}if(e){if(n.stringDirections){Object.keys(n.stringDirections).forEach(t=>{n.stringDirections[t].forEach(e=>{this.actionState[e]=t===s})})}if(n.degreeDirections){n.degreeDirections.forEach(e=>{e.actions.forEach(i=>{this.actionState[i]=(!e.min||e.min<=t)&&(!e.max||e.max>=t)})})}}}else if(i.degreeDirections&&i.degreeDirections.forEach(t=>{t.actions.forEach(t=>{this.actionState[t]=!1})}),i.stringDirections){Object.keys(i.stringDirections).forEach(t=>{i.stringDirections[t].forEach(t=>{this.actionState[t]=!1})})}}};t(0,this.isStickPressed(0)),t(1,this.isStickPressed(1))}}e.DefaultController=s},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BaseControllerSystem=void 0;const n=i(0),o=i(1);class s extends n.InputSystem{constructor(t,e){super(),this.stickActionCount={},this._onMappedStickActionAddedListeners=[],this._onMappedStickActionRemovedListeners=[],this.mappedStickRotationActions={},this.mappedAxesActions={},this.mappedStickActions={press:[],move:[]},this.gamepad=t}onClear(){}mapStickRangeToAction(t,e,i,n){this.mappedStickRotationActions[t]}isStickPressed(t){return!1}unmapInputFromAction(t,e){const i=this.mappedInputIdToActions[t];if(void 0===i)throw new Error(`The inputId ${t} was not mapped to any action.`);const n={inputId:t,action:e,actionNowUnmapped:!1},o=i.indexOf(e);if(o<0)throw new Error(`The inputId ${t} was not mapped to action ${e}.`);i.splice(o,1),i.length||delete this.mappedInputIdToActions[t];const s=this.mappedActionToInputIds[e].indexOf(t);if(s<0)throw new Error("Index should be greater than -1");return this.mappedActionToInputIds[e].splice(s,1),this.mappedActionToInputIds[e].length||delete this.mappedActionToInputIds[e],this._onMappedActionRemovedListeners.forEach(t=>t(n)),n}unmapStickFromAction(t,e,i){if(Array.isArray(e))return void e.forEach(n=>{this.unmapStickFromAction(t,e,i)});const n=this.validateStickActionType(e),o=this.getStickActionLookup(t,i,!1),s={index:t},a={inputId:s,actionNowUnmapped:!1,action:""};let r;if("string"===n){r=e;const t=o.actions.indexOf(r);if(t<0)throw new Error("Expected");o.actions.splice(t,1),o.actions.length||delete o.actions,a.action=r,this.updateStickActionCount(r,!1),a.actionNowUnmapped=!this.actionIsMapped(r),this._onMappedActionRemovedListeners.forEach(t=>t(a))}else{r=(e=e).action;(Array.isArray(e.direction)?e.direction:[e.direction]).forEach(e=>{if(s.direction=e,"string"==typeof e){const i=o.stringDirections[e].indexOf(r);if(i<0)throw new Error(`Action ${r} was not mapped to direction ${e} on the ${t} stick`);o.stringDirections[e].splice(i,1),o.stringDirections[e].length||(delete o.stringDirections[e],Object.keys(o.stringDirections).length||delete o.stringDirections)}else{const{min:i,max:n}=e,s=o.degreeDirections.find(t=>t.min==i&&t.max==t.max&&t.actions.includes(r));if(!s)throw new Error(`Action ${r} was not mapped to direction min max: ${e} on the ${t} stick`);s.actions.splice(s.actions.indexOf(r),1),s.actions.length||(o.degreeDirections.splice(o.degreeDirections.indexOf(s),1),o.degreeDirections.length||delete o.degreeDirections)}this.updateStickActionCount(r,!1),a.action=r,a.actionNowUnmapped=!this.actionIsMapped(r),this._onMappedActionRemovedListeners.forEach(t=>t(a))})}}actionIsMapped(t){var e;return!!this.stickActionCount[t]||!!(null===(e=this.mappedActionToInputIds[t])||void 0===e?void 0:e.length)}getStickActionLookup(t,e,i=!0){const n=e?"press":"move";if(!this.mappedStickActions[n][t]){if(!i)throw new Error("Expected to have index");this.mappedStickActions[n][t]={}}return this.mappedStickActions[n][t]}validateStickActionType(t){const e=typeof t;if("string"!==e&&"object"!==e)throw new Error("Invalid action type: "+t);return e}updateStickActionCount(t,e){e?this.stickActionCount[t]?this.stickActionCount[t]++:this.stickActionCount[t]=1:(this.stickActionCount[t]--,this.stickActionCount[t]||delete this.stickActionCount[t])}mapStickToAction(t,e,i){if(console.error("mapping",t,e),Array.isArray(e))return void e.forEach(n=>{this.mapStickToAction(t,e,i)});const n=this.validateStickActionType(e),s=this.getStickActionLookup(t,i,!0),a={index:t},r={inputId:a,action:""};let d;if("string"===n)d=e,s.actions?s.actions.push(d):s.actions=[d],r.action=d,this.updateStickActionCount(d,!0),this._onMappedActionAddedListeners.forEach(t=>t(r));else{d=(e=e).action;(Array.isArray(e.direction)?e.direction:[e.direction]).forEach(t=>{if(a.direction=t,"string"==typeof t){if(!o.isValidDirection(t))throw new Error("Invalid direction string "+t);s.stringDirections?s.stringDirections[t]?s.stringDirections[t].push(d):s.stringDirections[t]=[d]:s.stringDirections={[t]:[d]}}else{const{min:e,max:i}=t;if(this.validateMinMax(e,i),s.degreeDirections){const t=s.degreeDirections.find(t=>t.min==e&&t.max==i);t?t.actions.push(d):(s.degreeDirections.push({min:e,max:i,actions:[d]}),s.degreeDirections.sort((t,e)=>(t.min||0)-(e.min||0)))}else s.degreeDirections=[{min:e,max:i,actions:[d]}]}this.updateStickActionCount(d,!0),r.action=d,this._onMappedActionAddedListeners.forEach(t=>t(r))})}}makeButtonId(t){return"button_"+t}updateState(){this.gamepad.buttons.forEach((t,e)=>{const i=super.resolveActions(this.makeButtonId(e));null==i||i.forEach(e=>{super.actionState[e]=t.pressed})})}validateMinMax(t,e){const i=null!=t,n=null!=e;if(i&&(t<0||t>360))throw new Error("Invalid degree value, must be 0-360");if(n&&(e<0||e>360))throw new Error("Invalid degree value, must be 0-360");if(n&&i&&t>=e)throw new Error("Min should be less than max.")}}e.BaseControllerSystem=s},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BaseManager=void 0;e.BaseManager=class{constructor(){this.managedSystems=[],this._systemListeners={add:[],remove:[]}}update(){return this.onUpdate(),this.managedSystems.map(t=>t.update())}clear(){this.onClear();[...this.managedSystems].forEach(this.removeSystem.bind(this))}emit(t,e){"add"===t&&this.managedSystems.push(e);for(let i=0;i<this._systemListeners[t].length;i++)this._systemListeners[t][i](e)}addSystem(t){for(let e=0;e<this._systemListeners.add.length;e++)this._systemListeners.add[e](t);this.managedSystems.push(t)}removeSystem(t){t.onClear();for(let e=0;e<this._systemListeners.remove.length;e++)this._systemListeners.remove[e](t);const e=this.managedSystems.indexOf(t);e>-1&&this.managedSystems.splice(e,1)}on(t,e){this._systemListeners[t].push(e)}off(t,e){const i=this._systemListeners[t].indexOf(e);i>-1&&this._systemListeners[t].splice(i,1)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.KeyboardSystem=void 0;const n=i(0);class o extends n.InputSystem{constructor(t){super(t),this.actionsFinished=[],this.actionsStarted=[],this.handleKeyDown=this.handleKeyDown.bind(this),this.handleKeyUp=this.handleKeyUp.bind(this),window.addEventListener("keydown",this.handleKeyDown),window.addEventListener("keyup",this.handleKeyUp)}updateState(){this.actionsFinished.forEach(t=>{this.actionState[t]=!1}),this.actionsStarted.forEach(t=>{this.actionState[t]=!0}),this.actionsStarted.length=0,this.actionsFinished.length=0}handleKeyDown(t){const e=this.resolveActions(t.code);e&&this.actionsStarted.push(...e)}handleKeyUp(t){const e=this.resolveActions(t.code);e&&this.actionsFinished.push(...e)}onClear(){window.removeEventListener("keydown",this.handleKeyDown),window.removeEventListener("keyup",this.handleKeyUp)}}e.KeyboardSystem=o},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MouseSystem=void 0;const n=i(0);class o extends n.InputSystem{constructor(t){super(t),this.actionsFinished=[],this.actionsStarted=[],this.handleMouseDown=this.handleMouseDown.bind(this),this.handleMouseUp=this.handleMouseUp.bind(this),this.handleMouseMove=this.handleMouseMove.bind(this),window.addEventListener("mousedown",this.handleMouseDown),window.addEventListener("mouseup",this.handleMouseUp),window.addEventListener("mousemove",this.handleMouseMove)}updateState(){this.actionsFinished.forEach(t=>{this.actionState[t]=!1}),this.actionsStarted.forEach(t=>{this.actionState[t]=!0}),this.actionsStarted.length=0,this.actionsFinished.length=0}handleMouseMove(t){}handleMouseDown(t){const e=this.resolveActions(""+t.button);e&&this.actionsStarted.push(...e)}handleMouseUp(t){const e=this.resolveActions(""+t.button);e&&this.actionsFinished.push(...e)}onClear(){window.removeEventListener("mousedown",this.handleMouseDown),window.removeEventListener("mouseup",this.handleMouseUp),window.removeEventListener("mousemove",this.handleMouseMove)}}e.MouseSystem=o}]).default}));
//# sourceMappingURL=gotti-game-input.js.map